from flask import Flask, render_template, request, jsonify
import os
from google import genai
from google.genai import types
from duckduckgo_search import DDGS

GEMINI_API_KEY = "YOUR_GEMINI_API_KEY"

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/search', methods=['POST'])
def search():
    data = request.json
    query = data.get('query', '')
    if not query.strip():
        return jsonify({'result': 'Please enter a search query.', 'search_results': []})
    try:
        ai_response = get_gemini_response(query)
        
        ddg_results = perform_ddg_search(query, max_results=12)
        
        return jsonify({
            'result': ai_response + "\n This response is generated by Google's Gemini 2.0 Pro large language model.",
            'search_results': ddg_results
        })
    except Exception as e:
        return jsonify({
            'result': f'An error has occurred: {str(e)}',
            'search_results': []
        })

def get_gemini_response(query):
    """Get response from Gemini API"""
    client = genai.Client(
        api_key=GEMINI_API_KEY,
    )
    system_prompt = """
You act as an assistant who summarizes online search and research engine results and provides users with accurate, unbiased and reliable information. Your goal is to prepare explanations based on current, verified and generally accepted information for the user's search query.

When answering, never use greetings, welcomes or goodbyes. Just answer the question and focus directly on the topic. Do not make personal opinions, comments, speculations or assumptions. Without deviating from objectivity, answer only from verifiable academic sources, official statements or reliable information.

Do not provide inaccurate or incomplete information on a topic that you do not know, cannot be certain of its accuracy, or for which up-to-date and reliable sources are not available; instead, clearly state that there is insufficient data on the topic or that I do not have valid information. Never produce misleading information or fill in missing information.

Write your answers in simple, clear and fluent language. Do not include unnecessary technical details, overly academic language or complex sentence structures. However, make sure that your answers are satisfying in terms of content and provide enough scope to inform the user. Prepare your messages in a single paragraph and do not break the narrative.

Your answers should be at least 9-10 sentences in length. You can give examples, definitions and add statistical data if necessary, but do not go into unnecessary detail and do not deviate from the main topic. Analyze the context of the question well and provide only relevant information, without straying from the focus.

If the user question is too general or vague, provide basic information to clarify the issue, then back it up with more specific data. If necessary, you can also present different points of view objectively, but in a neutral and equidistant way, without taking sides.

Always work with consistency, clarity and accuracy. Reliability is your top priority in your answers. The information you use must be up-to-date and must not contain unnecessary repetition, sloppy wording or off-topic comments.

Evaluate each message from the user according to these rules and prepare your output accordingly. Respect token limitations. Don't leave it unfinished.

User Message:""" 
    
    contents = [
        types.Content(
            role="user",
            parts=[
                types.Part.from_text(
                    text=system_prompt + query
                ),
            ],
        ),
    ]
    generate_content_config = types.GenerateContentConfig(
        temperature=0.2,
        top_p=0.95,
        top_k=40,
        max_output_tokens=384,
        response_modalities=[
            "text",
        ],
        safety_settings=[
            types.SafetySetting(
                category="HARM_CATEGORY_HARASSMENT",
                threshold="BLOCK_ONLY_HIGH",
            ),
            types.SafetySetting(
                category="HARM_CATEGORY_SEXUALLY_EXPLICIT",
                threshold="BLOCK_LOW_AND_ABOVE",
            ),
            types.SafetySetting(
                category="HARM_CATEGORY_DANGEROUS_CONTENT",
                threshold="BLOCK_LOW_AND_ABOVE",
            ),
        ],
        response_mime_type="text/plain",
    )
    response = client.models.generate_content(
        model="gemini-2.0-pro-exp-02-05",
        contents=contents,
        config=generate_content_config,
    )
    
    return response.text

def perform_ddg_search(query, max_results=12):
    """Perform a search using DuckDuckGo and return the results."""
    search_results = []
    
    try:
        with DDGS() as ddgs:
            results = ddgs.text(query, region='us-en', max_results=max_results)
            for r in results:
                search_results.append({
                    'title': r.get('title', ''),
                    'body': r.get('body', ''),
                    'href': r.get('href', '')
                })
    except Exception as e:
        print(f"Search error: {str(e)}")
    
    return search_results

if __name__ == '__main__':
    app.run(debug=True)